package plugin

import (
	"cmp"
	"fmt"
	"path"
	"path/filepath"
	"runtime"

	nexusv1 "github.com/bergundy/nexus-proto-annotations/go/nexus/v1"
	"github.com/dave/jennifer/jen"
	"github.com/spf13/pflag"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
)

const nexusPkg = "github.com/nexus-rpc/sdk-go/nexus"
const nexusProtoPkg = "github.com/nexus-rpc/sdk-go/contrib/nexusproto"
const generatedFilenameExtension = "_nexus.pb.go"
const generatedPackageSuffix = "nexus"

var multiLineValues = jen.Options{
	Close:     "}",
	Multi:     true,
	Open:      "{",
	Separator: ",",
}

type Plugin struct {
	*protogen.Plugin
	version string
	commit  string
	flags   *pflag.FlagSet
}

func New(version, commit string) *Plugin {
	flags := pflag.NewFlagSet("plugin", pflag.ExitOnError)
	p := &Plugin{
		version: version,
		commit:  commit,
		flags:   flags,
	}

	return p
}

func (p *Plugin) Param(key, value string) error {
	return p.flags.Set(key, value)
}

func (p *Plugin) Run(plugin *protogen.Plugin) error {
	p.Plugin = plugin
	for _, file := range plugin.Files {
		if !file.Generate {
			continue
		}

		file.GoPackageName += generatedPackageSuffix
		prefixToSlash := filepath.ToSlash(file.GeneratedFilenamePrefix)
		file.GeneratedFilenamePrefix = path.Join(
			path.Dir(prefixToSlash),
			string(file.GoPackageName),
			path.Base(prefixToSlash),
		)
		importPath := path.Join(
			string(file.GoImportPath),
			string(file.GoPackageName),
		)

		f := jen.NewFilePathName(importPath, string(file.GoPackageName))
		p.genCodeGenerationHeader(f, file)

		var hasContent bool
		for _, svc := range file.Services {
			hasContent = true
			p.genConsts(f, svc)
			p.genHandler(f, svc)
			p.genClient(f, svc)
		}

		if !hasContent {
			continue
		}

		if err := f.Render(
			p.Plugin.NewGeneratedFile(
				file.GeneratedFilenamePrefix+generatedFilenameExtension,
				protogen.GoImportPath(importPath),
			),
		); err != nil {
			return fmt.Errorf("error rendering file: %w", err)
		}
	}

	return nil
}

func (p *Plugin) genCodeGenerationHeader(f *jen.File, target *protogen.File) {
	f.PackageComment("Code generated by protoc-gen-go-nexus. DO NOT EDIT.")
	f.PackageComment("versions: ")
	f.PackageComment(fmt.Sprintf("    protoc-gen-go-nexus %s (%s)", p.version, p.commit))
	f.PackageComment(fmt.Sprintf("    go %s", runtime.Version()))
	compilerVersion := p.Plugin.Request.CompilerVersion
	if compilerVersion != nil {
		f.PackageComment(fmt.Sprintf("    protoc %s", compilerVersion.String()))
	} else {
		f.PackageComment("    protoc (unknown)")
	}

	f.PackageComment(fmt.Sprintf("source: %s", target.Desc.Path()))
}

func (p *Plugin) genConsts(f *jen.File, svc *protogen.Service) {
	svcNameConst := fmt.Sprintf("%sServiceName", svc.GoName)
	svcNameVal := cmp.Or(serviceOptions(svc).GetName(), string(svc.Desc.FullName()))
	f.Commentf("%s defines the fully-qualified name for the %s service.", svcNameConst, svcNameVal)
	f.Const().Id(svcNameConst).Op("=").Lit(svcNameVal)

	for _, method := range svc.Methods {
		operationNameVal := cmp.Or(operationOptions(method).GetName(), method.GoName)
		nameConst := operationNameConst(svc, method)

		f.Commentf("%s defines the fully-qualified name for the %s operation.", nameConst, operationNameVal)
		f.Const().Id(nameConst).Op("=").Lit(operationNameVal)

		input, output := methodIO(method)
		f.Var().Id(operationVar(svc, method)).Op("=").Qual(nexusPkg, "NewOperationReference").Types(input, output).Call(jen.Id(nameConst))
	}
}

func (p *Plugin) genHandler(f *jen.File, svc *protogen.Service) {
	ifaceName := fmt.Sprintf("%sNexusServiceHandler", svc.GoName)
	unimplementedHandlerName := fmt.Sprintf("Unimplemented%s", ifaceName)

	statements := []jen.Code{
		jen.Id(fmt.Sprintf("mustEmbed%s", unimplementedHandlerName)).Call(),
	}

	for _, method := range svc.Methods {
		input, output := methodIO(method)
		st := jen.Id(method.GoName).Params(jen.Id("name").String()).Qual(nexusPkg, "Operation").Types(
			input,
			output,
		)
		statements = append(statements, st)
	}
	f.Type().Id(ifaceName).Interface(statements...)

	f.Func().Id(fmt.Sprintf("New%sNexusService", svc.GoName)).Params(
		jen.Id("h").Id(ifaceName),
	).Params(jen.Op("*").Qual(nexusPkg, "Service"), jen.Error()).
		BlockFunc(func(g *jen.Group) {
			g.Id("svc").Op(":=").Qual(nexusPkg, "NewService").Call(jen.Id(fmt.Sprintf("%sServiceName", svc.GoName)))
			g.Id("err").Op(":=").Id("svc").Dot("Register").CallFunc(func(g *jen.Group) {
				for _, method := range svc.Methods {
					g.Id("h").Dot(method.GoName).Call(jen.Id(operationNameConst(svc, method)))
				}
			})
			g.If().Id("err").Op("!=").Nil().Block(jen.Return().Nil().Op(",").Id("err"))
			g.Return().Id("svc").Op(",").Nil()
		})

	f.Type().Id(unimplementedHandlerName).Struct()

	f.Func().
		ParamsFunc(func(g *jen.Group) {
			g.Id("h").Op("*").Id(unimplementedHandlerName)
		}).
		Id(fmt.Sprintf("mustEmbed%s", unimplementedHandlerName)).
		Params().
		Block()

	for _, method := range svc.Methods {
		input, output := methodIO(method)

		f.Func().
			ParamsFunc(func(g *jen.Group) {
				g.Id("h").Op("*").Id(unimplementedHandlerName)
			}).
			Id(method.GoName).
			Params(jen.Id("name").String()).
			Qual(nexusPkg, "Operation").Types(input, output).
			Block(
				jen.Panic(jen.Lit("TODO")),
				// TODO: this doesn't have a Name() and can't be used as an Operation.
				// jen.Return().Op("&").Qual(nexusPkg, "UnimplementedOperation").Types(input, output).Block(),
			)
	}
}

func (p *Plugin) genClient(f *jen.File, svc *protogen.Service) {
	structName := fmt.Sprintf("%sNexusHTTPClient", svc.GoName)
	f.Type().
		Id(structName).
		StructFunc(func(g *jen.Group) {
			g.Id("client").Qual(nexusPkg, "HTTPClient")
		})

	ctorName := fmt.Sprintf("New%sNexusHTTPClient", svc.GoName)
	f.Commentf("%s initializes a new %s.", ctorName, structName)
	f.Comment("options.Service is overridden with the defined proto service name.")
	f.Func().
		Id(ctorName).
		ParamsFunc(func(g *jen.Group) {
			g.Id("options").Qual(nexusPkg, "HTTPClientOptions")
		}).
		Params(
			jen.Op("*").Id(structName),
			jen.Error(),
		).
		BlockFunc(func(g *jen.Group) {
			g.Id("options").Dot("Service").Op("=").Id(fmt.Sprintf("%sServiceName", svc.GoName))
			g.If().Id("options").Dot("Serializer").Op("==").Nil().Block(
				jen.Id("options").Dot("Serializer").Op("=").Qual(nexusProtoPkg, "Serializer").Call(
					// TODO: this can be made configurable.
					jen.Qual(nexusProtoPkg, "SerializerModePreferJSON"),
				),
			)
			g.Id("client").Op(",").Id("err").Op(":=").Qual(nexusPkg, "NewHTTPClient").Call(
				jen.Id("options"),
			)
			g.If(jen.Id("err").Op("!=").Nil()).Block(jen.Return(jen.Nil(), jen.Id("err")))
			g.Return(
				jen.Op("&").Id(structName).CustomFunc(multiLineValues, func(g *jen.Group) {
					g.Id("client").Op(":").Op("*").Id("client")
				}),
				jen.Nil(),
			)
		})

	for _, method := range svc.Methods {
		syncMethodName := method.GoName
		asyncMethodName := fmt.Sprintf("%sAsync", method.GoName)
		input, output := methodIO(method)

		hasInput := method.Input.Desc.FullName() != "google.protobuf.Empty"
		hasOutput := method.Output.Desc.FullName() != "google.protobuf.Empty"

		f.Func().
			ParamsFunc(func(g *jen.Group) {
				g.Id("c").Op("*").Id(structName)
			}).
			Id(asyncMethodName).
			ParamsFunc(func(g *jen.Group) {
				g.Id("ctx").Qual("context", "Context")
				if hasInput {
					g.Id("input").Add(input)
				}
				g.Id("options").Qual(nexusPkg, "StartOperationOptions")
			}).
			Params(
				jen.Op("*").Qual(nexusPkg, "ClientStartOperationResult").Types(output),
				jen.Error(),
			).
			BlockFunc(func(g *jen.Group) {
				g.Return().Qual(nexusPkg, "StartOperation").CallFunc(func(g *jen.Group) {
					g.Id("ctx")
					g.Op("&").Id("c").Dot("client")
					g.Id(operationVar(svc, method))
					if hasInput {
						g.Id("input")
					} else {
						g.Nil()
					}
					g.Id("options")
				})
			})

		f.Func().
			ParamsFunc(func(g *jen.Group) {
				g.Id("c").Op("*").Id(structName)
			}).
			Id(syncMethodName).
			ParamsFunc(func(g *jen.Group) {
				g.Id("ctx").Qual("context", "Context")
				if hasInput {
					g.Id("input").Add(input)
				}
				g.Id("options").Qual(nexusPkg, "ExecuteOperationOptions")
			}).
			ParamsFunc(func(g *jen.Group) {
				if hasOutput {
					g.Add(output)
				}
				g.Error()
			}).
			BlockFunc(func(g *jen.Group) {
				call := jen.Qual(nexusPkg, "ExecuteOperation").CallFunc(func(g *jen.Group) {
					g.Id("ctx")
					g.Op("&").Id("c").Dot("client")
					g.Id(operationVar(svc, method))
					if hasInput {
						g.Id("input")
					} else {
						g.Nil()
					}
					g.Id("options")
				})

				if hasOutput {
					g.Id("output").Op(",").Id("err").Op(":=").Add(call)
					g.Return().Id("output").Op(",").Id("err")
				} else {
					g.Id("_").Op(",").Id("err").Op(":=").Add(call)
					g.Return().Id("err")
				}
			})
	}
}

func methodIO(method *protogen.Method) (*jen.Statement, *jen.Statement) {
	var input *jen.Statement
	if method.Input.Desc.FullName() != "google.protobuf.Empty" {
		input = jen.Op("*").Qual(string(method.Input.GoIdent.GoImportPath), method.Input.GoIdent.GoName)
	} else {
		input = jen.Qual(nexusPkg, "NoValue")
	}

	var output *jen.Statement
	if method.Output.Desc.FullName() != "google.protobuf.Empty" {
		output = jen.Op("*").Qual(string(method.Output.GoIdent.GoImportPath), method.Output.GoIdent.GoName)
	} else {
		output = jen.Qual(nexusPkg, "NoValue")
	}
	return input, output
}

func operationNameConst(svc *protogen.Service, method *protogen.Method) string {
	return fmt.Sprintf("%s%sOperationName", svc.GoName, method.GoName)
}

func operationVar(svc *protogen.Service, method *protogen.Method) string {
	return fmt.Sprintf("%s%sOperation", svc.GoName, method.GoName)
}

// operationOptions returns the OperationOptions for the given proto Method
func operationOptions(m *protogen.Method) *nexusv1.OperationOptions {
	opts, _ := proto.GetExtension(m.Desc.Options(), nexusv1.E_Operation).(*nexusv1.OperationOptions)
	return opts
}

// serviceOptions returns the ServiceOptions for the given proto Service
func serviceOptions(svc *protogen.Service) *nexusv1.ServiceOptions {
	opts, _ := proto.GetExtension(svc.Desc.Options(), nexusv1.E_Service).(*nexusv1.ServiceOptions)
	return opts
}
